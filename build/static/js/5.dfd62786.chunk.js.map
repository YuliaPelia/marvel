{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","service/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","resCom","_transformComics","getComics","n","title","page","pageCount","price","prices","SingleComicPage","comicId","useParams","setComics","useEffect","updateComics","then","onComicsLoaded","errorMessage","spiner","content","View","className","language","imgStyle","to"],"mappings":"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","file":"static/js/5.dfd62786.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=2813600ead6a7195f6ec5f57400c79d3';\r\n    const _apiNum = 80;\r\n\r\n    const _apiComNum = 99;\r\n    // будемо робити запити до нашого сервера(api)\r\n    // запит по всіх персонажах\r\n    const getAllCharacters = async (offset = _apiNum) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n        // res.data.results.map(); - для того щоб сформувати масив з новими обєктами\r\n        // ?? - якщо перша змінна undefined || null тоді буде те що з права\r\n    }\r\n\r\n\r\n    // запит по певному одному персонажу\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description.slice(0, 210) : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async(offset = _apiComNum) => {\r\n        const resCom = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return resCom.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async(id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (n) => {\r\n        return {\r\n            id: n.id,\r\n            thumbnail: n.thumbnail.path + '.' + n.thumbnail.extension,\r\n            name: n.title,\r\n            description: n.description ? n.description.slice(0, 210) : 'There is no description for this character',\r\n            // language: n.textObjects[0].language,\r\n            page: n.pageCount,\r\n            price: n.prices[0].price\r\n\r\n        }\r\n    }\r\n    \r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if(!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                setLoading(false);\r\n                return data;\r\n\r\n                \r\n            } catch(e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    \r\n    return {loading, request, error, clearError}\r\n}","import { useState, useEffect } from 'react';\r\nimport { useParams, NavLink } from 'react-router-dom';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../service/MarvelService';\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const {comicId} = useParams();\r\n    const [comics, setComics] = useState(null);\r\n\r\n    const {loading, error, getComics, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n\r\n        updateComics();\r\n        \r\n    }, [comicId]);\r\n\r\n    const updateComics = () => {\r\n\r\n        clearError();\r\n\r\n        getComics(comicId)\r\n            .then(onComicsLoaded);\r\n    }\r\n\r\n    const onComicsLoaded = (comics) => {\r\n        setComics(comics);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spiner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comics) ? <View comics={comics}/> : null;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            {errorMessage}\r\n            {spiner}\r\n            {content}\r\n        </div>\r\n    )\r\n\r\n    function View ({comics}) {\r\n        const {thumbnail, name, description, language, page, price} = comics;\r\n        \r\n        let imgStyle = {'objectFit' : 'cover'};\r\n\r\n        if (comics.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n            imgStyle = {'objectFit' : 'unset'};\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <img src={thumbnail} style={imgStyle} alt=\"x-men\" className=\"single-comic__img\"/>\r\n                <div className=\"single-comic__info\">\r\n                    <h2 className=\"single-comic__name\">{name}</h2>\r\n                    <p className=\"single-comic__descr\">{description}</p>\r\n                    <p className=\"single-comic__descr\">{page} pages</p>\r\n                    <p className=\"single-comic__descr\">Language: {language}</p>\r\n                    <div className=\"single-comic__price\">{price}$</div>\r\n                </div>\r\n                <NavLink to='/comics' className=\"single-comic__back\">Back to all</NavLink>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}