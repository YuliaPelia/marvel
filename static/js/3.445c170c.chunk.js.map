{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","service/MarvelService.js","hooks/http.hook.js","components/errorBoundaries/ErrorBoundary.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComics","resCom","_transformComics","getComics","n","title","page","pageCount","price","prices","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component","CharList","chars","setChars","setOffset","charEnded","setCharsEnded","loandingMore","setLoadingMore","useEffect","onRequest","initial","then","onCharAllLoaded","newChars","ended","length","LoadingMore","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","errorMessage","spinner","Spinner","content","arr","i","imgStyle","className","tabIndex","ref","el","onClick","onCharSelected","onKeyDown","e","key","ViewItem","disabled","Skeleton","View","href","CharInfo","setChar","updateChar","charId","onCharLoaded","skeleton","RandomChar","Math","floor","random","mjolnir","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.445c170c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=2813600ead6a7195f6ec5f57400c79d3';\r\n    const _apiNum = 80;\r\n\r\n    const _apiComNum = 99;\r\n    // будемо робити запити до нашого сервера(api)\r\n    // запит по всіх персонажах\r\n    const getAllCharacters = async (offset = _apiNum) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n        // res.data.results.map(); - для того щоб сформувати масив з новими обєктами\r\n        // ?? - якщо перша змінна undefined || null тоді буде те що з права\r\n    }\r\n\r\n\r\n    // запит по певному одному персонажу\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description.slice(0, 210) : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url, \r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const getAllComics = async(offset = _apiComNum) => {\r\n        const resCom = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return resCom.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async(id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (n) => {\r\n        return {\r\n            id: n.id,\r\n            thumbnail: n.thumbnail.path + '.' + n.thumbnail.extension,\r\n            name: n.title,\r\n            description: n.description ? n.description.slice(0, 210) : 'There is no description for this character',\r\n            // language: n.textObjects[0].language,\r\n            page: n.pageCount,\r\n            price: n.prices[0].price\r\n\r\n        }\r\n    }\r\n    \r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, \r\n        method = 'GET', \r\n        body = null, \r\n        headers = {'Content-Type': 'application/json'}) => {\r\n\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, {method, body, headers});\r\n\r\n                if(!response.ok) {\r\n                    throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                setLoading(false);\r\n                return data;\r\n\r\n                \r\n            } catch(e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    \r\n    return {loading, request, error, clearError}\r\n}","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../service/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [offset, setOffset] = useState(585);\n    const [charEnded, setCharsEnded] = useState(false);\n    const [loandingMore, setLoadingMore] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n \n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setLoadingMore(false) : setLoadingMore(true)\n        getAllCharacters(offset)\n            .then(onCharAllLoaded)\n    }\n\n    const onCharAllLoaded = (newChars) => { \n        let ended = false;\n        if(newChars.length < 9) {\n            ended = true\n        } \n\n        setChars(chars => [...chars, ...newChars]);\n        setLoadingMore(LoadingMore => false)\n        setOffset(offset => offset + 9);\n        setCharsEnded(charEnded => ended);\n\n    }\n\n\n    const itemRefs = useRef([]);\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function ViewItem (arr) {\n\n        const items = arr.map((char, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={char.id}\n                    onClick={() => {\n                        props.onCharSelected(char.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(char.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={char.thumbnail} alt={char.name} style={imgStyle}/>\n                        <div className=\"char__name\">{char.name}</div>\n                </li>\n            )\n        }); \n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    \n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !loandingMore ? <Spinner/> : null;\n    const content = ViewItem(chars);\n\n    return (\n        <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n\n                <button \n                className=\"button button__main button__long\"\n                disabled={loandingMore}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">Load more</div>\n                </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../service/MarvelService';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n\n            updateChar();\n        \n    }, [props.charId])\n\n    // при кліку на персонажів будемо обновляти той компонент\n    const updateChar = () => {\n        const {charId} = props;\n\n        // якщо id немає \n        if(!charId) {\n            return\n        }\n\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    // розділимо нашу верстку на два компоненти один буде займатися інтерфейсом, другий - логікою і станом\n\n\n        // якщо не загружений персонаж, не завантаження і не помилка, тоді в такому випадку ми будемо відображати компонент скелетону\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n\n\nfunction View ({char}) {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n   \n        let imgStyle = {'objectFit' : 'cover'};\n        if (char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit' : 'unset'};\n        }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n            <img src={thumbnail} style={imgStyle} alt=\"abyss\"/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {comics.map((item, i) => {\n                    // eslint-disable-next-line\n                    if (i > 9) return;\n                    return(\n                        <li key={i} className=\"char__comics-item\">\n                            \n                            {item.name}\n                        </li>\n                    )\n                })}\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../service/MarvelService';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => { \n\n    const [char, setChar] = useState({});\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 3000);\n    }, [])\n\n\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n\n}\n\nfunction View ({char}) {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundaries/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null); // ноякого персонажа не вибрано\r\n\r\n    const onCharSelected = (id) => {\r\n      setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <ErrorBoundary>\r\n            <RandomChar />\r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n            <CharList onCharSelected={onCharSelected} />\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n            </ErrorBoundary>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;"],"sourceRoot":""}